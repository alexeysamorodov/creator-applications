// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApplicationsServiceClient is the client API for ApplicationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationsServiceClient interface {
	CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*CreateApplicationResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
}

type applicationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationsServiceClient(cc grpc.ClientConnInterface) ApplicationsServiceClient {
	return &applicationsServiceClient{cc}
}

func (c *applicationsServiceClient) CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*CreateApplicationResponse, error) {
	out := new(CreateApplicationResponse)
	err := c.cc.Invoke(ctx, "/creator.applications.abstractions.ApplicationsService/CreateApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/creator.applications.abstractions.ApplicationsService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationsServiceServer is the server API for ApplicationsService service.
// All implementations must embed UnimplementedApplicationsServiceServer
// for forward compatibility
type ApplicationsServiceServer interface {
	CreateApplication(context.Context, *CreateApplicationRequest) (*CreateApplicationResponse, error)
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	mustEmbedUnimplementedApplicationsServiceServer()
}

// UnimplementedApplicationsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationsServiceServer struct {
}

func (UnimplementedApplicationsServiceServer) CreateApplication(context.Context, *CreateApplicationRequest) (*CreateApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApplication not implemented")
}
func (UnimplementedApplicationsServiceServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedApplicationsServiceServer) mustEmbedUnimplementedApplicationsServiceServer() {}

// UnsafeApplicationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationsServiceServer will
// result in compilation errors.
type UnsafeApplicationsServiceServer interface {
	mustEmbedUnimplementedApplicationsServiceServer()
}

func RegisterApplicationsServiceServer(s grpc.ServiceRegistrar, srv ApplicationsServiceServer) {
	s.RegisterService(&ApplicationsService_ServiceDesc, srv)
}

func _ApplicationsService_CreateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).CreateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creator.applications.abstractions.ApplicationsService/CreateApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).CreateApplication(ctx, req.(*CreateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creator.applications.abstractions.ApplicationsService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApplicationsService_ServiceDesc is the grpc.ServiceDesc for ApplicationsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApplicationsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "creator.applications.abstractions.ApplicationsService",
	HandlerType: (*ApplicationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApplication",
			Handler:    _ApplicationsService_CreateApplication_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _ApplicationsService_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "applications_service.proto",
}
